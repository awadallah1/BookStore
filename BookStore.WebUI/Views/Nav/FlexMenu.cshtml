@model Dictionary<string, int>
    
<style>
    .vcenter {
        display: inline-block;
        margin-top: 3px;
        float: none;
    }

    .Gleft {
        text-align: left;
        margin-left: 5px;
    }

    .GleftCenter {
        text-align: center;
        margin-left: 5px;
    }
    .OverFlow{
        overflow:hidden;
        text-overflow:ellipsis;
    }
</style>
@{
    bool horizontal = (bool)(ViewContext.RouteData.Values["horizontalLayout"] ?? false);
        
    string wrapperClass = horizontal ?"btn-group btn-group-sm btn-group-justified" : null;
}
<div class="@(horizontal ?"btn-group btn-group-sm btn-group-justified" : null)" >

    @Html.ActionLink("Home", "List", "Book", null,
    new { @class = horizontal? "btn btn-default btn-sm GleftCenter" : "btn-block btn btn-default btn-lg GleftCenter" })

    @foreach (var link in Model)
    {
        <a href="@Url.Action("List", "Book", new
            {
                Controller = "Book",
                Action = "List",
                category = link.Key,
                page = 1
            })" class="@(horizontal?"btn btn-default btn-sm OverFlow ":"btn-block btn btn-default btn-lg Gleft ")+@((link.Key == ViewBag.selectedCategory ? " btn-primary":""))">
            @link.Key
            <span class="@(horizontal?"badge pull-right":"badge pull-right vcenter")">@link.Value</span>
        </a>
    }
</div>

    @*@Html.RouteLink(link,
        new
        {
            Controller = "Book",
            Action = "List",
            category = link,
            page = 1
        },
        new { @class ="btn-block btn btn-default btn-lg" +(link==ViewBag.selectedCategory?" btn-primary":"")})*@





